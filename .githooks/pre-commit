#!/bin/sh
#
# Pre-commit hook for doc-lint
# Prevents committing scratch directories and runs quality checks
#

# Color codes
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color

echo "${GREEN}Running pre-commit checks...${NC}"

# 1. Check for scratch directory in staged files
if git diff --cached --name-only | grep -q "^scratch/"; then
  echo "${RED}Error: Attempting to commit files from scratch/ directory${NC}"
  echo "${YELLOW}The scratch/ directory is for temporary work and should not be committed.${NC}"
  echo ""
  echo "Blocked files:"
  git diff --cached --name-only | grep "^scratch/" | sed 's/^/  - /'
  echo ""
  echo "To fix this:"
  echo "  git reset HEAD scratch/"
  echo ""
  exit 1
fi

# 1b. Check for claude-iterate directory in staged files
if git diff --cached --name-only | grep -q "^claude-iterate/"; then
  echo "${RED}Error: Attempting to commit files from claude-iterate/ directory${NC}"
  echo "${YELLOW}The claude-iterate/ directory is an AI workspace and should not be committed.${NC}"
  echo ""
  echo "Blocked files:"
  git diff --cached --name-only | grep "^claude-iterate/" | sed 's/^/  - /'
  echo ""
  echo "To fix this:"
  echo "  git reset HEAD claude-iterate/"
  echo ""
  exit 1
fi

# 2. Check for test coverage directory
if git diff --cached --name-only | grep -q "^coverage/"; then
  echo "${RED}Error: Attempting to commit coverage/ directory${NC}"
  echo "${YELLOW}The coverage/ directory should not be committed.${NC}"
  echo ""
  echo "To fix this:"
  echo "  git reset HEAD coverage/"
  echo "  Add 'coverage/' to .gitignore if not already present"
  echo ""
  exit 1
fi

# 3. Check for node_modules (just in case)
if git diff --cached --name-only | grep -q "^node_modules/"; then
  echo "${RED}Error: Attempting to commit node_modules/ directory${NC}"
  echo ""
  exit 1
fi

# 4. Run linting on staged files
STAGED_TS_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.ts$' | tr '\n' ' ')

if [ -n "$STAGED_TS_FILES" ]; then
  echo "Linting staged TypeScript files..."

  # Run ESLint on staged files
  npx eslint $STAGED_TS_FILES
  LINT_EXIT=$?

  if [ $LINT_EXIT -ne 0 ]; then
    echo "${RED}ESLint found issues. Please fix them before committing.${NC}"
    echo ""
    echo "To fix automatically (if possible):"
    echo "  npx eslint $STAGED_TS_FILES --fix"
    echo "  git add $STAGED_TS_FILES"
    echo ""
    echo "To skip this hook (not recommended):"
    echo "  git commit --no-verify"
    exit $LINT_EXIT
  fi

  # Run Prettier check on staged files
  npx prettier --check $STAGED_TS_FILES
  PRETTIER_EXIT=$?

  if [ $PRETTIER_EXIT -ne 0 ]; then
    echo "${RED}Prettier found formatting issues. Please fix them before committing.${NC}"
    echo ""
    echo "To fix automatically:"
    echo "  npx prettier --write $STAGED_TS_FILES"
    echo "  git add $STAGED_TS_FILES"
    echo ""
    exit $PRETTIER_EXIT
  fi

  echo "${GREEN}✓ Lint checks passed${NC}"
fi

# 5. Run type check (optional, can be slow)
# Uncomment if you want type checking on every commit
# echo "Type checking..."
# npm run typecheck
# if [ $? -ne 0 ]; then
#   echo "${RED}Type check failed. Please fix type errors before committing.${NC}"
#   exit 1
# fi

echo "${GREEN}✓ All pre-commit checks passed${NC}"
exit 0
